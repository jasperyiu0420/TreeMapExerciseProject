{"version":3,"sources":["Component/TreeMapInput.tsx","Component/TreeMapRawInput.tsx","Screen/TreeMapScreen.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TreeMapInput","onFinish","values","props","add","Item","label","name","rules","required","type","htmlType","React","Component","TreeMapRawInput","TextArea","value","this","json","onChange","e","handleRawDataChange","onClick","save","TreeMapScreen","handleAddData","errorList","handleValidate","length","notification","error","message","description","join","state","dataSource","push","setState","rawData","JSON","stringify","success","handleSaveRawData","jsonData","parse","reduce","acc","currVal","Array","from","Set","weight","isNaN","Number","target","span","title","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae95cabb.chunk.js","sourcesContent":["import { Input, Form, Button } from 'antd';\r\nimport React from 'react';\r\nimport { InputType } from '../Screen/TreeMapScreen';\r\n\r\ninterface ITreeMapInputProps {\r\n    add: (values: InputType) => void\r\n}\r\n\r\nexport default class TreeMapInput extends React.Component<ITreeMapInputProps> {\r\n    render() {\r\n        return (\r\n            <Form onFinish={(values: InputType) => this.props.add(values)}>\r\n                <Form.Item\r\n                    label=\"name\"\r\n                    name=\"name\"\r\n                    rules={[{ required: true}]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"weight\"\r\n                    name=\"weight\"\r\n                    rules={[{ required: true}]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"value\"\r\n                    name=\"value\"\r\n                    rules={[{ required: true}]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Add Data\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form >\r\n        )\r\n    }\r\n}","import { Input, Form, Button } from 'antd';\r\nimport React from 'react';\r\nimport { InputType } from '../Screen/TreeMapScreen';\r\n\r\ninterface ITreeMapRawInputProps {\r\n    save: (values: string) => void\r\n    json: string\r\n    handleRawDataChange: (e: any) => void\r\n}\r\n\r\nexport default class TreeMapRawInput extends React.Component<ITreeMapRawInputProps> {\r\n    render() {\r\n        return (\r\n            <>\r\n                <Input.TextArea value={this.props.json} onChange={(e) => this.props.handleRawDataChange(e)} />\r\n                <Button type={\"primary\"} onClick={() => { this.props.save(this.props.json) }}>Submit Raw Data</Button>\r\n            </>\r\n        )\r\n    }\r\n}","import { Card, Col, Row, notification } from 'antd';\r\nimport React from 'react';\r\nimport TreeMapInput from '../Component/TreeMapInput'\r\nimport TreeMapRawInput from '../Component/TreeMapRawInput'\r\n\r\n\r\nexport interface InputType {\r\n    name: string,\r\n    weight: string,\r\n    value: string\r\n}\r\n\r\n\r\nexport interface TreeMapScreenState {\r\n    rawData: string,\r\n    dataSource: InputType[]\r\n}\r\n\r\nexport default class TreeMapScreen extends React.Component<{}, TreeMapScreenState> {\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            rawData: \"\",\r\n            dataSource: []\r\n        }\r\n    }\r\n    handleAddData = (value: InputType) => {\r\n        const errorList = this.handleValidate(value);\r\n        if (errorList.length > 0) {\r\n            notification.error({ message: \"Create Data Failed\", description: errorList.join(\".\") })\r\n            return;\r\n        }\r\n        this.state.dataSource.push(value)\r\n        this.setState({ rawData: JSON.stringify(this.state.dataSource) })\r\n        notification.success({ message: \"Create Data Success\" })\r\n\r\n\r\n    }\r\n\r\n    handleSaveRawData = (value: string) => {\r\n        try {\r\n            const jsonData = JSON.parse(value);\r\n            const errorList: string[] = jsonData.reduce((acc: string[], currVal: InputType) => {\r\n                const error = this.handleValidate(currVal)\r\n                return [...acc, ...error]\r\n            }, [])\r\n            if (errorList.length > 0) {\r\n                notification.error({ message: \"Save Raw Data Failed\", description: Array.from(new Set(errorList)).join(\".\") })\r\n                this.setState({ rawData: JSON.stringify(this.state.dataSource) })\r\n                return;\r\n            }\r\n            this.setState({ dataSource: jsonData })\r\n            notification.success({ message: \"Save Raw Data Success\" })\r\n\r\n        }\r\n        catch {\r\n            notification.error({ message: \"Save Raw Data Failed\", description: \"must be valid JSON\" })\r\n            this.setState({ rawData: JSON.stringify(this.state.dataSource) })\r\n        }\r\n    }\r\n\r\n    handleValidate = (value: InputType): string[] => {\r\n        const error: string[] = []\r\n        if (value.name && value.name.length > 50) {\r\n            error.push(\"data.name must be string and less than 50 characters\")\r\n        }\r\n        if (value.weight && isNaN(Number(value.weight))) {\r\n            error.push(\"data.weight must be integer\")\r\n        }\r\n        if (this.state.dataSource.length > 50) {\r\n            error.push(\"array.length <= 50\")\r\n        }\r\n        return error;\r\n    }\r\n\r\n    handleRawDataChange = (e: any) => {\r\n        this.setState({ rawData: e.target.value })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col span={8}>\r\n                    <Card title=\"Data Input\">\r\n                        <TreeMapInput add={(value) => this.handleAddData(value)} />\r\n                    </Card>\r\n                    <Card title=\"Raw Data Input\">\r\n                        <TreeMapRawInput save={(value) => this.handleSaveRawData(value)} json={this.state.rawData} handleRawDataChange={(e) => this.handleRawDataChange(e)} />\r\n                    </Card>\r\n                </Col>\r\n                <Col span={16}>\r\n                    <p>{JSON.stringify(this.state.dataSource)}</p>\r\n                </Col>\r\n            </Row>\r\n\r\n        )\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TreeMapScreen from './Screen/TreeMapScreen';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\" >\n        <TreeMapScreen />\n      </div>\n    );\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}