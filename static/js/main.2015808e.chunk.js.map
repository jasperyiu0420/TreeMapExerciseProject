{"version":3,"sources":["Component/TreeMapInput.tsx","Component/TreeMapRawInput.tsx","Component/TreeMap.tsx","Data/TreeMapInitDataSource.ts","Screen/TreeMapScreen.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TreeMapInput","onFinish","values","props","add","Item","label","name","rules","required","type","htmlType","React","Component","TreeMapRawInput","TextArea","value","this","json","onChange","e","handleRawDataChange","onClick","save","TreeMap","componentDidMount","TreeMapAlgorithm","componentDidUpdate","prevProps","column","JSON","stringify","dataSource","tree","totalWeight","reduce","acc","data","weight","sort","a","b","minimumWeightPerRow","Math","max","ceil","cloneDataSource","length","map","push","columnWeight","treeColumn","index","slice","console","log","filter","idx","setState","divider","state","treerow","element","style","backgroundColor","border","flex","defaultDataSource","TreeMapScreen","handleAddData","errorList","handleValidate","notification","error","message","description","join","rawData","Number","success","handleSaveRawData","jsonData","parse","currVal","Array","from","Set","isNaN","target","row","span","title","extra","min","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2015808e.chunk.js","sourcesContent":["import { Input, Form, Button } from 'antd';\r\nimport React from 'react';\r\nimport { InputType } from '../Screen/TreeMapScreen';\r\n\r\ninterface ITreeMapInputProps {\r\n    add: (values: InputType) => void\r\n}\r\n\r\nexport default class TreeMapInput extends React.Component<ITreeMapInputProps> {\r\n    render() {\r\n        return (\r\n            <Form onFinish={(values: InputType) => this.props.add(values)}>\r\n                <Form.Item\r\n                    label=\"name\"\r\n                    name=\"name\"\r\n                    rules={[{ required: true}]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"weight\"\r\n                    name=\"weight\"\r\n                    rules={[{ required: true}]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"value\"\r\n                    name=\"value\"\r\n                    rules={[{ required: true}]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Add Data\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form >\r\n        )\r\n    }\r\n}","import { Input, Form, Button } from 'antd';\r\nimport React from 'react';\r\nimport { InputType } from '../Screen/TreeMapScreen';\r\n\r\ninterface ITreeMapRawInputProps {\r\n    save: (values: string) => void\r\n    json: string\r\n    handleRawDataChange: (e: any) => void\r\n}\r\n\r\nexport default class TreeMapRawInput extends React.Component<ITreeMapRawInputProps> {\r\n    render() {\r\n        return (\r\n            <>\r\n                <Input.TextArea value={this.props.json} onChange={(e) => this.props.handleRawDataChange(e)} />\r\n                <Button type={\"primary\"} onClick={() => { this.props.save(this.props.json) }}>Submit Raw Data</Button>\r\n            </>\r\n        )\r\n    }\r\n}","import { Input, Form, Button, Row, Col, Divider } from 'antd';\r\nimport React from 'react';\r\nimport { InputType } from '../Screen/TreeMapScreen';\r\n\r\ninterface ITreeMapProps {\r\n    dataSource: InputType[]\r\n    column: number\r\n}\r\n\r\ninterface ITreeMapState {\r\n    tree: InputType[][]\r\n    divider: number\r\n}\r\n\r\n\r\n\r\nexport default class TreeMap extends React.Component<ITreeMapProps, ITreeMapState> {\r\n\r\n    constructor(props: ITreeMapProps) {\r\n        super(props);\r\n        this.state = { tree: [], divider: 0 }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.TreeMapAlgorithm()\r\n    }\r\n\r\n    componentDidUpdate = (prevProps: ITreeMapProps) => {\r\n        if (prevProps.column !== this.props.column || JSON.stringify(this.props.dataSource) !== JSON.stringify(prevProps.dataSource)) {\r\n            this.TreeMapAlgorithm()\r\n        }\r\n    }\r\n\r\n    TreeMapAlgorithm = () => {\r\n        const { dataSource, column } = this.props;\r\n        const tree: InputType[][] = []\r\n        const totalWeight = dataSource.reduce((acc, data) => acc + data.weight, 0);\r\n\r\n\r\n        dataSource.sort((a, b) => b.weight - a.weight)\r\n        let minimumWeightPerRow = Math.max(Math.ceil(totalWeight / column), dataSource[0].weight);\r\n        let cloneDataSource = dataSource;\r\n\r\n        while (cloneDataSource.length > 0) {\r\n            if (cloneDataSource.length + tree.length === column) {\r\n                [...cloneDataSource].map(data => tree.push([data]))\r\n                break;\r\n            }\r\n            let columnWeight = 0;\r\n            const treeColumn: InputType[] = []\r\n            let index = 0;\r\n            while (index < cloneDataSource.length) {\r\n                // console.log(\"hello\", cloneDataSource)\r\n\r\n                if (minimumWeightPerRow - columnWeight >= cloneDataSource[index].weight) {\r\n                    treeColumn.push(cloneDataSource[index]);\r\n                    columnWeight = columnWeight + cloneDataSource[index].weight;\r\n                    cloneDataSource = cloneDataSource.slice(1)\r\n                    console.log(columnWeight, \" \", minimumWeightPerRow)\r\n                }\r\n                else {\r\n                    index++;\r\n                }\r\n\r\n                if (cloneDataSource.length + tree.length + 1 === column) {\r\n                    break;\r\n                }\r\n            }\r\n            if (minimumWeightPerRow - columnWeight !== 0) {\r\n                for (let index = cloneDataSource.length - 2; index > 0; index--) {\r\n                    if (cloneDataSource[index].weight > minimumWeightPerRow - columnWeight) {\r\n                        treeColumn.push(cloneDataSource[index + 1]);\r\n                        cloneDataSource = cloneDataSource.filter((value, idx) => idx !== index + 1)\r\n                        if (tree.length === 0) {\r\n                            minimumWeightPerRow = treeColumn.reduce((acc, data) => acc + data.weight, 0);\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            tree.push(treeColumn)\r\n            // console.log(\"treeColumn\", treeColumn)\r\n            console.log(\"tree\", tree)\r\n        }\r\n        this.setState({ tree: tree, divider: minimumWeightPerRow })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.state.tree.map(treerow =>\r\n                <Row>{treerow.map(element =>\r\n                    <Col\r\n                        style={element.value < 0 ? { backgroundColor: \"red\", border: \"solid\" } : { backgroundColor: \"green\", border: \"solid\" }}\r\n                        flex={element.weight / this.state.divider}>\r\n                        <p>{element.name}</p><p>{element.value}</p>\r\n                    </Col>)}\r\n                </Row>\r\n            )\r\n\r\n            // JSON.stringify(this.state.tree)\r\n        )\r\n    }\r\n}","import { InputType } from \"../Screen/TreeMapScreen\";\r\n\r\nexport const defaultDataSource: InputType[] = [\r\n    { name: 'A', weight: 3, value: -0.02 },\r\n    { name: 'B', weight: 3, value: 0.05 },\r\n    { name: 'C', weight: 6, value: 0.015 },\r\n    { name: 'D', weight: 2, value: -0.01 },\r\n    { name: 'E', weight: 3, value: 0.01 },\r\n    { name: \"j\", weight: 9, value: 0.1 }\r\n]","import { Card, Col, Row, notification, Input, InputNumber } from 'antd';\r\nimport React from 'react';\r\nimport TreeMapInput from '../Component/TreeMapInput'\r\nimport TreeMapRawInput from '../Component/TreeMapRawInput'\r\nimport TreeMap from '../Component/TreeMap'\r\nimport { defaultDataSource } from '../Data/TreeMapInitDataSource'\r\n\r\nexport interface InputType {\r\n    name: string,\r\n    weight: number,\r\n    value: number\r\n}\r\n\r\n\r\nexport interface TreeMapScreenState {\r\n    rawData: string,\r\n    dataSource: InputType[]\r\n    row: number\r\n}\r\n\r\nexport default class TreeMapScreen extends React.Component<{}, TreeMapScreenState> {\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            rawData: JSON.stringify(defaultDataSource),\r\n            dataSource: defaultDataSource,\r\n            row: 3\r\n        }\r\n    }\r\n    handleAddData = (value: InputType) => {\r\n        const errorList = this.handleValidate(value);\r\n        if (errorList.length > 0) {\r\n            notification.error({ message: \"Create Data Failed\", description: errorList.join(\".\") })\r\n            return;\r\n        }\r\n        this.setState({ rawData: JSON.stringify(this.state.dataSource), dataSource: [...this.state.dataSource, { name: value.name, weight: Number(value.weight), value: Number(value.value) }] })\r\n        notification.success({ message: \"Create Data Success\" })\r\n\r\n\r\n    }\r\n\r\n    handleSaveRawData = (value: string) => {\r\n        try {\r\n            const jsonData = JSON.parse(value);\r\n            const errorList: string[] = jsonData.reduce((acc: string[], currVal: InputType) => {\r\n                const error = this.handleValidate(currVal)\r\n                return [...acc, ...error]\r\n            }, [])\r\n            if (errorList.length > 0) {\r\n                notification.error({ message: \"Save Raw Data Failed\", description: Array.from(new Set(errorList)).join(\".\") })\r\n                this.setState({ rawData: JSON.stringify(this.state.dataSource) })\r\n                return;\r\n            }\r\n            this.setState({ dataSource: jsonData })\r\n            notification.success({ message: \"Save Raw Data Success\" })\r\n\r\n        }\r\n        catch {\r\n            notification.error({ message: \"Save Raw Data Failed\", description: \"must be valid JSON\" })\r\n            this.setState({ rawData: JSON.stringify(this.state.dataSource) })\r\n        }\r\n    }\r\n\r\n    handleValidate = (value: InputType): string[] => {\r\n        const error: string[] = []\r\n        if (value.name && value.name.length > 50) {\r\n            error.push(\"data.name must be string and less than 50 characters\")\r\n        }\r\n        if (value.weight && isNaN(Number(value.weight))) {\r\n            error.push(\"data.weight must be integer\")\r\n        }\r\n        if (this.state.dataSource.length > 50) {\r\n            error.push(\"array.length <= 50\")\r\n        }\r\n        return error;\r\n    }\r\n\r\n    handleRawDataChange = (e: any) => {\r\n        this.setState({ rawData: e.target.value })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col span={8}>\r\n                    <Card title=\"Data Input\">\r\n                        <TreeMapInput add={(value) => this.handleAddData(value)} />\r\n                    </Card>\r\n                    <Card title=\"Raw Data Input\">\r\n                        <TreeMapRawInput save={(value) => this.handleSaveRawData(value)} json={this.state.rawData} handleRawDataChange={(e) => this.handleRawDataChange(e)} />\r\n                    </Card>\r\n                </Col>\r\n                <Col span={16}>\r\n                    <Card extra={<InputNumber value={this.state.row} onChange={(value: number) => this.setState({ row: value })} min={1} max={this.state.dataSource.length} />}>\r\n                        <TreeMap dataSource={this.state.dataSource} column={this.state.row} />\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n\r\n        )\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TreeMapScreen from './Screen/TreeMapScreen';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\" >\n        <TreeMapScreen />\n      </div>\n    );\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}